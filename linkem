#!/bin/bash

link="ln -svf"
source=$(cd $(dirname $0); pwd -P)
excludes="$0 README.md bin applescript samples"
type=$(uname -s)

function check_file {
	echo "Checking file $1"
	if [[ $excludes =~ $file ]]; then
		echo "Excluding $base/$file."
	else
		if [ -d "$base/$file" ]; then
			scan_directory $1 $path
		elif [ -f "$base/$file" ]; then
			$link $base/$file ~/.$path
		else
			echo "Cannot find $base/$file."
		fi
	fi
}

function scan_directory {
	echo "--------------------------------------------------------------------------------"
	echo "--- $1 --- $2 ---"
	echo "--------------------------------------------------------------------------------"
	if [ -n "$2" ]; then
		if [ ! -d ~/.$2 ]; then
			echo "Path ~/.$2 does not exist, skipping..."
			return
		fi
		local base="$1/$2"
	else
		local base=$1
	fi
	if [ ! -d $base ]; then
		echo "$base directory does not exist, skipping..."
		return
	fi
	echo "Scanning directory $base ..."
	local noarch_files=$(ls $base | grep -v Linux | grep -v Darwin)
	local arch_files=$(ls $base | grep $type)
	for file in $noarch_files; do
		if [ -n "$2" ]; then
			local path="$2/$file"
		else
			local path=$file
		fi
		if [[ $excludes =~ $file ]]; then
			echo "Excluding $base/$file."
		else
			if [ -d "$base/$file" ]; then
				scan_directory $1 $path 
			elif [ -f "$base/$file" ]; then
				$link $base/$file ~/.$path
			else
				echo "Cannot find $base/$file."
			fi
		fi
	done
	for file in $arch_files; do
		if [ -n "$2" ]; then
			local path="$2/$file"
		else
			local path=$file
		fi
		if [[ $excludes =~ $type.$file ]]; then
			echo "Excluding $base/$file."
		else
			if [ -d "$base/$file" ]; then
				scan_directory $1 $path
			elif [ -f "$base/$file" ]; then
				$link $base/$file ~/.${path#$type.*}
			else
				echo "Cannot find $base/$file."
			fi
		fi
	done
	echo "Done with $base."
}

scan_directory $source 
