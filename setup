#!/usr/bin/env bash

this_dir=$(cd $(dirname $0); pwd -P)
source=$this_dir/dotfiles
link="ln -svf"
arch=$(uname -s)
host=
exec=
link_only=false
email="michael@cramer.name"

while getopts ":tb:l" opt; do
    case $opt in
    t)
        exec=echo
        ;;
    l)
      link_only=true
      ;;
    b)
        value=$OPTARG
        ;;
    \?)
        echo "Invalid option: -$opt" >&2
        exit 1
        ;;
    :)
        echo "Option -$opt requires an argument." >&2
        exit 1
        ;;
    esac
done
shift $(($OPTIND - 1))


function install_brew_packages {
  echo "================================================================================"
  echo "Installing brew packages... "
  echo "--------------------------------------------------------------------------------"
  brew=$(which brew) # witch brew?
  if [ -z "$brew" ]; then
    echo "First, installing brew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    echo "Good, brew is installed..."
  fi
  $brew bundle 
}

function install_python_modules {
  echo ""
  echo "================================================================================"
  echo " Installing Python modules"
  echo "--------------------------------------------------------------------------------"
  echo "|                                                                              |"

  pip3 install -r $this_dir/python/requirements.txt
}

function handle_dotfile_directory {
  local base=$1
  local dir=$(basename $base)
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi

  pushd $base 1>/dev/null
  for file in $(find * -type f); do
    $exec mkdir -p $(dirname $HOME/.$dir/$file)
    $exec $link $base/$file $HOME/.$dir/$file
  done
  popd 1>/dev/null
}

function link_dotfiles {
  local base=$1
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi
  declare -A dotfiles

  echo "================================================================================"
  echo "--- Linking dotfiles in $1"

  for file in $(find $base -mindepth 1 -maxdepth 1 -type f -not -name "arch-*" -exec basename {} ';'); do
    dotfiles[$HOME/.$file]=$base/$file
  done

  for type in $arch $host; do
    for file in $(find $base -mindepth 1 -maxdepth 1 -type f -name "arch-$type.*" -exec basename {} ';'); do
      dotfiles[$HOME/${file#arch-$type*}]=$base/$file
    done
  done
  
  for dotfile in "${!dotfiles[@]}"; do
    $exec $link ${dotfiles[$dotfile]} $dotfile
  done
    
  for dir in $(find $base -mindepth 1 -maxdepth 1 -type d); do
    handle_dotfile_directory $dir
  done


  echo "--------------------------------------------------------------------------------"
  echo "--- Done with $base."
  echo
}

function config_misc {
  case $arch in
    Darwin)
	# First, read in the user headers, in case there's something already there...
	user_headers=$(defaults read com.apple.mail UserHeaders)
	if [ $user_headers -eq $email ]; then
		echo "Reply-To address already set to $email."
	else
		echo "Setting Reply-To address to $email."
		defaults write com.apple.mail UserHeaders '{"Reply-To" = "'$email'";}'
	fi
	echo "Setting Finder to show full path in title."
	defaults write com.apple.finder _FXShowPosixPathInTitle -bool true; killall Finder
      ;;
  esac
}

function config_powerline {
    # pip3 install powerline-status 
    powerline_location=$(pip3 show powerline-status | sed -E -n 's/^Location: (.+)/\1/p')

}



echo "################################################################################"
echo " ENVironment deploYment "
echo "================================================================================"
echo "^                                                                              ^"

link_dotfiles $source 
if [ "$link_only" == false ]; then
  install_brew_packages 
  install_python_modules 
fi

echo "################################################################################"
echo




# if [ -d "$vim_runtime" ]; then
#     echo "Vim runtime already exists at $vim_runtime."
# else
#     echo "Installing Vim runtime to $vim_runtime."
#     git clone --depth=1 https://github.com/amix/vimrc.git $vim_runtime
#     sh $vim_runtime/install_awesome_vimrc.sh
# fi
