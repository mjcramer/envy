#!/usr/bin/env bash

script_dir=$(
  cd $(dirname $0)
  pwd -P
)
link="ln -svf"
arch=$(uname -s)
email="michael@cramer.name"
components=("applications" "brew" "dotfiles" "fonts" "misc")

WHITE='\033[1;39m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
RESET='\033[0m'

host=
exec=

usage() {
  echo -e "This script sets up this machine with all applications and tools needed for development.\n"
  echo -e "Usage: ${0##*/} [flags] <parameter1> <parameter2> ..."
  echo -e "  -h                      Print usage instructions"
  echo -e "  -e EMAIL                Specifiy email address (default: ${email})"
  echo -e "  -c COMPONENT            A comma separated list of components to set up"
  echo -e "  -t                      Test mode, log actions but don't do anything"
  echo -e "  -y                      Yes to all prompts"
}

while getopts ":ac:e:hty" opt; do
  case $opt in
  h)
    usage
    exit 0
    ;;
  t)
    exec=echo
    ;;
  e)
    email=${OPTARG}
    ;;
  c)
    IFS=',' read -r -a components <<< "$OPTARG"
    ;;
  y)
    yes_to_all=true
    ;;
  \?)
    echo "Invalid option: -$opt" >&2
    exit 1
    ;;
  :)
    echo "Option -$opt requires an argument." >&2
    exit 1
    ;;
  esac
done
shift $(($OPTIND - 1))

# Ask for confirmation with a pretty prompt
confirm() {
  # Prompt message
  echo -e "${YELLOW}${1} [y/N]${RESET}"

  if [ "${yes_to_all}" == true ]; then
    echo "yes"
    return 0
  fi

  # Read user input
  read -p "$(echo -e ${GREEN}Confirmation: ${RESET})" -n 1 -r

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # User confirmed
    echo -e "${GREEN}Confirmed. Proceeding...${RESET}"
    return 0
  else
    # User did not confirm
    echo -e "${RED}Aborted by user.${RESET}"
    return 1
  fi
}

# Print section heading
heading() {
  local header="$1"
  local term_width=$(tput cols) # Get terminal width
  local padded_header=" $header "
  local header_length=${#padded_header}
  local left_padding=$(((term_width - header_length) / 2))
  local right_padding=$left_padding

  # Adjust right padding for odd term_width - header_length
  if [ $(((term_width - header_length) % 2)) -ne 0 ]; then
    right_padding=$((left_padding + 1))
  fi

  echo $(printf '%*s' "$term_width" '' | tr ' ' $2)
  printf '%*s' "$left_padding" ''    # Print left padding
  echo -en "${WHITE}$padded_header${RESET}"           # Print header
  printf '%*s\n' "$right_padding" '' # Print right padding
  echo $(printf '%*s' "$term_width" '' | tr ' ' $2)
}

setup_applications() {
  heading "Downloading applications" "-"
  applications=(
    "iTerm" "https://iterm2.com/downloads/stable/iTerm2-3_4_23.zip"
    "Slack" "https://downloads.slack-edge.com/releases/macos/4.36.140/prod/universal/Slack-4.36.140-macOS.dmg"
    "1Password" "https://downloads.1password.com/mac/1Password.zip"
    "Zoom" "https://zoom.us/client/5.17.11.31580/zoomusInstallerFull.pkg"
    "Spotify" "https://download.scdn.co/SpotifyInstaller.zip"
    # "Intellij Idea" "https://www.jetbrains.com/idea/download/download-thanks.html?platform=mac"
    # "Firefox" "https://download.mozilla.org/?product=firefox-latest-ssl&os=osx&lang=en-US"
  )

  pushd ~/Downloads
  for ((i = 0; i < ${#applications[@]}; i += 2)); do
    echo "Downloading ${applications[$i]} from ${applications[$i + 1]}..."
    curl -L "${applications[$i + 1]}" -o $(basename ${applications[$i + 1]})
  done
  popd
}

setup_brew() {
  local brewfile=${script_dir}/Brewfile
  heading "Installing brew packages from $brewfile" "-"

  brew=$(which brew) # witch brew?
  if [ -z "$brew" ]; then
    echo "First, installing brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  else
    echo "Good, brew is installed..."
    echo
  fi
  $brew bundle --file $brewfile
}

setup_fisher() {
  local fishfile=${script_dir}/fishfile
  heading "Installing plugins for fish shell from $fishfile..." "-"
  for plugin in $(cat $fishfile); do
    fish -c "fisher install $plugin"
  done

  pushd /Library/Fonts
  for font in mesloLGS_NF_regular mesloLGS_NF_bold mesloLGS_NF_italic mesloLGS_NF_bold_italic; do
    echo "Downloading $font font..."
    wget -q https://github.com/IlanCosman/tide/blob/assets/fonts/$font.ttf?raw=true --output-document=$font.ttf
  done
  popd
}

setup_dotfiles() {
  local base=${script_dir}/dotfiles
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi
  declare -A dotfiles

  heading "Linking dotfiles in $base" "-"

  for file in $(find $base -mindepth 1 -maxdepth 1 -type f -not -name "arch-*" -exec basename {} ';'); do
    dotfiles[$HOME/.$file]=$base/$file
  done

  for type in $arch $host; do
    for file in $(find $base -mindepth 1 -maxdepth 1 -type f -name "arch-$type.*" -exec basename {} ';'); do
      dotfiles[$HOME/${file#arch-$type*}]=$base/$file
    done
  done

  for dotfile in "${!dotfiles[@]}"; do
    $exec $link ${dotfiles[$dotfile]} $dotfile
  done

  for parent in $(find $base -mindepth 1 -maxdepth 1 -type d); do
    echo $base
    echo $parent
    local dir=$(basename $parent)
    echo $dir
    $exec mkdir -p $HOME/.$dir
    pushd $base/$dir 1>/dev/null
    for file in $(find * -type f); do
      $exec $link $base/$dir/$file $HOME/.$dir/$file
    done
    popd 1>/dev/null
  done
}

setup_misc() {
  case $arch in
  Darwin)
    # First, read in the user headers, in case there's something already there...
    # user_headers=$(defaults read com.apple.mail UserHeaders | plutil -convert json -o - - | jq -r '."Reply-To"')
    # if [ "$user_headers" = "$email" ]; then
    #   echo "Reply-To address already set to $email."
    # else
    #   echo "Setting Reply-To address to $email."
    #   defaults write com.apple.mail UserHeaders '{"Reply-To" = "'$email'";}'
    # fi

    echo "Setting Finder to show full path in title."
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    killall Finder

    echo "Setting Finder to show all files."
    defaults write com.apple.Finder AppleShowAllFiles YES
    killall Finder

    ;;
  esac
}

setup_fonts() {
  pushd /Library/Fonts
  for font in mesloLGS_NF_regular mesloLGS_NF_bold mesloLGS_NF_italic mesloLGS_NF_bold_italic; do
    echo "Downloading $font font..."
    wget -q https://github.com/IlanCosman/tide/blob/assets/fonts/$font.ttf?raw=true $font.ttf
  done
  popd
}

main() {
  heading "ENVironment deploYment" "#"

  for component in "${components[@]}"; do
    echo "Setting up $component..."
    eval setup_${component}
  done
  exit

  # # brew
  # if [ "$setup["brew"]" == true ]; then
  # 	install_brew_packages $script_dir/Brewfile
  # fi

  # # python
  # if [ "$setup["python"]" == true ]; then
  # 	install_python_modules $script_dir/python/requirements.txt
  # fi

  # # fisher
  # if [ "$setup["fisher"]" == true ]; then
  #   install_fisher_plugins $script_dir/fishfile
  # fi

  # # applications
  # if confirm "Download applications?"; then
  #   install_downloads
  # fi

  # # misc
  # if [ "$setup["misc"]" == true ]; then
  #   config_misc
  #   download_fonts
  # fi

  #	if confirm "(Re)Link dotfiles?"; then
  #	  link_dotfiles $script_dir/dotfiles
  #  fi

  echo "################################################################################"
  echo
}

# Run main if executed or exit if sourced
(return 0 2>/dev/null) || main
