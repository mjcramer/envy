#!/usr/bin/env bash

this_dir=$(cd $(dirname $0); pwd -P)
source=$this_dir/config
link="ln -svf"
arch=$(uname -s)
host=
excludes="$0 README.md bin applescript samples"
exec=

while getopts ":tb:" opt; do
    case $opt in
    t)
        exec=echo
        ;;
    b)
        value=$OPTARG
        ;;
    \?)
        echo "Invalid option: -$opt" >&2
        exit 1
        ;;
    :)
        echo "Option -$opt requires an argument." >&2
        exit 1
        ;;
    esac
done
shift $(($OPTIND - 1))


read -r -d '' brew_packages <<-'EOF'
htop 
vim 
bash4
bash-completion 
tree 
wget 
curl 
git 
jq
nmap
iftop
ansible
packer 
terraform 
consul 
awscli
Caskroom/cask/google-cloud-sdk
homebrew/completions/docker-completion
homebrew/completions/packer-completion
homebrew/completions/vagrant-completion
homebrew/completions/pip-completion
homebrew/completions/brew-cask-completion
EOF

read -r -d '' pip_packages <<-'EOF'
pandas
numpy
pyproj
shapely
ansible
EOF

function check_file {
	echo "Checking file $1"
	if [[ $excludes =~ $file ]]; then
		echo "Excluding $base/$file."
	else
		if [ -d "$base/$file" ]; then
			link_dotfiles $1 $path
		elif [ -f "$base/$file" ]; then
			echo $link $base/$file ~/.$path
		else
			echo "Cannot find $base/$file."
		fi
	fi
}

function scan_files {
  echo "================================================================================"
	echo "--- scan_files $@ ---"
	echo "--------------------------------------------------------------------------------"

  local base=$1
  if [ -n "$2" ]; then
    local pred="-name \"$type.*\""
  else
    local tag=""
  fi

  echo "Scanning directory $base ... $tag"
  for file in $(find $base -maxdepth 1 -type f $pred -exec basename {} ';'); do
    echo "$HOME/.$file --> $base/$file"
  done
}

function link_dotfiles {
	echo "--------------------------------------------------------------------------------"
	echo "--- Linking dotfiles in $1 "
	echo "--------------------------------------------------------------------------------"
  
  # if [ -n "$2" ]; then
  #   if [ ! -d ~/.$2 ]; then
  #     echo "Path ~/.$2 does not exist, skipping..."
  #     return
  #   fi
  #   local base="$1/$2"
  # else
  #   local base=$1
  # fi

  local base=$1/dotfiles
  declare -A dotfiles
  
  # if [ ! -d $base ]; then
  #   echo "$base directory does not exist, skipping..."
  #   return
  # fi

  for file in $(find $base -mindepth 1 -maxdepth 1 -type f -not -name "*.*" -exec basename {} ';'); do
    dotfiles[$HOME/.$file]=$base/$file
  done

  for type in $arch $host; do
    for file in $(find $base -mindepth 1 -maxdepth 1 -type f -name "$type.*" -exec basename {} ';'); do
      dotfiles[$HOME/${file#$type*}]=$base/$file
    done
  done
  
  for dotfile in "${!dotfiles[@]}"; do 
    $exec $link ${dotfiles[$dotfile]} $dotfile
  done
  
	echo "--------------------------------------------------------------------------------"
	echo "--- Done with $base."
  echo
}

function install_packages {
  echo "Installing packages... "
	case $arch in
		Darwin)
      for package in $brew_packages; do
        brew install $package
      done
			;;
	esac
}

# link_dotfiles $source 
install_packages 
