#!/usr/bin/env bash

script_dir=$(cd $(dirname $0); pwd -P)
link="ln -svf"
arch=$(uname -s)
host=
exec=
email="michael@cramer.name"
setup_brew=false
setup_python=false
setup_fisher=false
setup_misc=false

usage() {
    echo -e "This script sets up the shell environment.\n"
    echo -e "Usage: ${0##*/} [flags] <parameter1> <parameter2> ..."
    echo -e "  -h          Print usage instructions"
    echo -e "  -a          Does everything"
    echo -e "  -d          Links dotfiles"
    echo -e "  -b          Run brew installer"
    echo -e "  -p          Run pip installer"
    echo -e "  -m          Run miscellany"
    echo -e "  -f          Run fisher installer"
}


while getopts ":htadbfpm" opt; do
  case $opt in
    h)
        usage
        exit 0
        ;;
    t)
      exec=echo
      ;;
	  a)
		  setup_brew=true
		  setup_dotfiles=true
		  setup_python=true
		  setup_misc=true
      ;;
    d)
		  setup_dotfiles=true
      ;;
    b)
		  setup_brew=true
      ;;
    p)
		  setup_python=true
		  ;;
		f)
		  setup_fisher=true
		  ;;
		m) 
		  setup_misc=true
      ;;
    \?)
      echo "Invalid option: -$opt" >&2
      exit 1
      ;;
    :)
      echo "Option -$opt requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $(($OPTIND - 1))


# Print section heading
heading() {
    char=${2:-=}
    echo
    printf "${char}%.0s" $(seq -3 ${#1})
    echo
    echo "${char} $1 ${char}"
    printf "${char}%.0s" $(seq -3 ${#1})
    echo
	echo
}

install_brew_packages() {
  local brewfile=$1
  heading "Installing brew packages from $brewfile... "

  brew=$(which brew) # witch brew?
  if [ -z "$brew" ]; then
    echo "First, installing brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  else
    echo "Good, brew is installed..."
    echo
  fi
  $brew bundle --file $brewfile
}

install_python_modules() {
  local requirements=$1
  heading "Installing python modules from $requirements..."

  python3 -m pip install --upgrade pip
  pip3 install -r $requirements
}

install_fisher_plugins() {
  local fishfile=$1
  heading "Installing plugins for fish shell from $fishfile..."
  for plugin in $(cat $fishfile); do
    fish -c "fisher install $plugin"
  done

  pushd /Library/Fonts
  for font in mesloLGS_NF_regular mesloLGS_NF_bold mesloLGS_NF_italic mesloLGS_NF_bold_italic; do
    echo "Downloading $font font..."
    wget -q https://github.com/IlanCosman/tide/blob/assets/fonts/$font.ttf?raw=true $font.ttf
  done
  popd
}

handle_dotfile_directory() {
  local base=$1
  local dir=$(basename $base)
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi

  pushd $base 1>/dev/null
  for file in $(find * -type f); do
    $exec mkdir -p $(dirname $HOME/.$dir/$file)
    $exec $link $base/$file $HOME/.$dir/$file
  done
  popd 1>/dev/null
}

link_dotfiles() {
  local base=$1
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi
  declare -A dotfiles

  echo "================================================================================"
  echo "--- Linking dotfiles in $1"

  for file in $(find $base -mindepth 1 -maxdepth 1 -type f -not -name "arch-*" -exec basename {} ';'); do
    dotfiles[$HOME/.$file]=$base/$file
  done

  for type in $arch $host; do
    for file in $(find $base -mindepth 1 -maxdepth 1 -type f -name "arch-$type.*" -exec basename {} ';'); do
      dotfiles[$HOME/${file#arch-$type*}]=$base/$file
    done
  done

  for dotfile in "${!dotfiles[@]}"; do
    $exec $link ${dotfiles[$dotfile]} $dotfile
  done

  for dir in $(find $base -mindepth 1 -maxdepth 1 -type d); do
    handle_dotfile_directory $dir
  done

  echo "--------------------------------------------------------------------------------"
  echo "--- Done with $base."
  echo
}

config_misc() {
  case $arch in
    Darwin)
	    # First, read in the user headers, in case there's something already there...
	    user_headers=$(defaults read com.apple.mail UserHeaders | plutil -convert json -o - - | jq -r '."Reply-To"')
	    if [ "$user_headers" = "$email" ]; then
		    echo "Reply-To address already set to $email."
	    else
		    echo "Setting Reply-To address to $email."
		    defaults write com.apple.mail UserHeaders '{"Reply-To" = "'$email'";}'
	    fi

      echo "Setting Finder to show full path in title."
	    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true; killall Finder

	    echo "Setting Finder to show all files."
	    defaults write com.apple.Finder AppleShowAllFiles YES; killall Finder

      ;;
  esac
}




main() {
	heading "ENVironment deploYment" "#"

	# brew
	if [ "$setup_brew" == true ]; then
		install_brew_packages $script_dir/Brewfile
	fi

	# python
	if [ "$setup_python" == true ]; then
		install_python_modules $script_dir/python/requirements.txt
	fi

  # fisher
  if [ "$setup_fisher" == true ]; then
    install_fisher_plugins $script_dir/fishfile
  fi

  # misc
	if [ "$setup_misc" == true ]; then
    config_misc
    download_fonts 
  fi
	
	link_dotfiles $script_dir/dotfiles

	echo "################################################################################"
	echo
}

# Run main if executed or exit if sourced
(return 0 2>/dev/null) || main

