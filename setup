#!/usr/bin/env bash

this_dir=$(cd $(dirname $0); pwd -P)
source=$this_dir/dotfiles
link="ln -svf"
arch=$(uname -s)
host=
exec=
email="michael@cramer.name"
setup_brew=false
setup_python=false
setup_dotfiles=false

while getopts ":tabprdl" opt; do
  case $opt in
    t)
      exec=echo ;;
	  a)
		  setup_brew=true
		  setup_dotfiles=true
		  setup_python=true ;;
    d)
		  setup_dotfiles=true ;;
    b)
		  setup_brew=true ;;
    p)
		  setup_python=true ;;
    \?)
      echo "Invalid option: -$opt" >&2
      exit 1 ;;
    :)
      echo "Option -$opt requires an argument." >&2
      exit 1 ;;
  esac
done
shift $(($OPTIND - 1))


# Print section heading
heading() {
    char=${2:-=}
    echo
    printf "${char}%.0s" $(seq -3 ${#1})
    echo
    echo "| $1 |"
    printf "${char}%.0s" $(seq -3 ${#1})
    echo
	echo
}

function install_brew_packages {
  heading "Installing brew packages... "

  brew=$(which brew) # witch brew?
  if [ -z "$brew" ]; then
    echo "First, installing brew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    echo "Good, brew is installed..."
    echo
  fi
  $brew bundle
}

function install_python_modules {
  heading "Installing python modules..."

  pip3 install -r $this_dir/python/requirements.txt
}

function handle_dotfile_directory {
  local base=$1
  local dir=$(basename $base)
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi

  pushd $base 1>/dev/null
  for file in $(find * -type f); do
    $exec mkdir -p $(dirname $HOME/.$dir/$file)
    $exec $link $base/$file $HOME/.$dir/$file
  done
  popd 1>/dev/null
}

function link_dotfiles {
  local base=$1
  if [ ! -d $base ]; then
    echo "$base directory does not exist, skipping..."
    return
  fi
  declare -A dotfiles

  echo "================================================================================"
  echo "--- Linking dotfiles in $1"

  for file in $(find $base -mindepth 1 -maxdepth 1 -type f -not -name "arch-*" -exec basename {} ';'); do
    dotfiles[$HOME/.$file]=$base/$file
  done

  for type in $arch $host; do
    for file in $(find $base -mindepth 1 -maxdepth 1 -type f -name "arch-$type.*" -exec basename {} ';'); do
      dotfiles[$HOME/${file#arch-$type*}]=$base/$file
    done
  done

  for dotfile in "${!dotfiles[@]}"; do
    $exec $link ${dotfiles[$dotfile]} $dotfile
  done

  for dir in $(find $base -mindepth 1 -maxdepth 1 -type d); do
    handle_dotfile_directory $dir
  done


  echo "--------------------------------------------------------------------------------"
  echo "--- Done with $base."
  echo
}

function config_misc {
  case $arch in
    Darwin)
	    # First, read in the user headers, in case there's something already there...
	    user_headers=$(defaults read com.apple.mail UserHeaders | plutil -convert json -o - - | jq -r '."Reply-To"')
	    if [ "$user_headers" = "$email" ]; then
		    echo "Reply-To address already set to $email."
	    else
		    echo "Setting Reply-To address to $email."
		    defaults write com.apple.mail UserHeaders '{"Reply-To" = "'$email'";}'
	    fi

	    if [ $(defaults read com.apple.finder _FXShowPosixPathInTitle) -eq 0 ]; then
	      echo "Setting Finder to show full path in title."
	      defaults write com.apple.finder _FXShowPosixPathInTitle -bool true; killall Finder
	    else
	      echo "Showing full path in finder."
	    fi

	    defaults write com.apple.Finder AppleShowAllFiles YES
	    if [ $(defaults read com.apple.Finder AppleShowAllFiles) -eq 0 ]; then
	      echo "Setting Finder to show full path in title."
	      defaults write com.apple.Finder AppleShowAllFiles YES; killall Finder
	    else
	      echo "Showing all files in finder."
	    fi
      ;;
  esac
}

function config_powerline {
    # pip3 install powerline-status
    powerline_location=$(pip3 show powerline-status | sed -E -n 's/^Location: (.+)/\1/p')

}

function main {
	heading "ENVironment deploYment" "#"

	# brew
	if [ "$setup_brew" == true ]; then
		install_brew_packages
	fi

	# python
	if [ "$setup_python" == true ]; then
		install_python_modules
	fi

	# dotfiles
	if [ "$setup_dotfiles" == true ]; then
		link_dotfiles $source
	fi

  # misc
  config_misc

	echo "################################################################################"
	echo
}

# Run main if executed or exit if sourced
(return 0 2>/dev/null) || main

